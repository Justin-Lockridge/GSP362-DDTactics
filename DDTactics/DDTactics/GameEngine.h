////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  GameEngine class for GSP361 Applied Development Project
//  By:  Justin Lockridge
//  Date:  12 November 2013
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  KNOWN ISSUES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  TODO:   []
//			[]
//			[]
#pragma once

#include <stdio.h>
#include <time.h>
#include <vector>
#pragma comment(lib, "winmm.lib")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  INFO:  Game Includes


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Direct3D headers && includes
#include <d3d9.h>
#include <d3dx9.h>
#pragma comment(lib, "d3d9.lib")
#pragma comment(lib, "d3dx9.lib")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  DirectInput headers && includes
#define DIRECTINPUT_VERSION 0x0800
#include <dinput.h>
#pragma comment(lib, "dinput8.lib")
#pragma comment(lib, "dxguid.lib")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Audio includes using FMOD
#include "fmod.h"
#include "fmod.hpp"
#pragma comment(lib, "fmodex_vc.lib")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  INFO:  Dragon's Demise Headers


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  For safely releasing objects
#define SAFE_RELEASE(x) if(x){x->Release(); x = 0;}

enum GAME_STATE{
	MENU_MAIN,
	MENU_LOAD,
	MENU_OPTIONS,
	MENU_CREDITS,
	LEVEL_ONE
};

class GameEngine{
	//////////////////////////////////////////////////////////////////////////
	// Application Variables
	//////////////////////////////////////////////////////////////////////////
	HWND				m_hWnd;					// Handle to the window
	bool				m_bVsync;				// Boolean for vertical syncing
	float				m_currTime;				// Time to render current frame
	float				m_prevTime, m_deltaTime, m_frameTime;				// Time to render previous frame
	int					m_FPS, m_gameOver, m_gameState, m_menuState, m_menuSelection;		

	//////////////////////////////////////////////////////////////////////////
	// Direct3D Variables
	//////////////////////////////////////////////////////////////////////////
	IDirect3D9*			m_pD3DObject;	// Direct3D 9 Object
	IDirect3DDevice9*	m_pD3DDevice;	// Direct3D 9 Device
	D3DCAPS9			m_D3DCaps;		// Device Capabilities

	//////////////////////////////////////////////////////////////////////////
	// Font Variables
	//////////////////////////////////////////////////////////////////////////
	ID3DXFont*			m_pD3DFont, *m_fontTwo;		// Font Object

	//////////////////////////////////////////////////////////////////////////
	// Sprite Variables
	//////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//  2D Textures
	ID3DXSprite*		m_pD3DSprite;	// Sprite Object
	IDirect3DTexture9*	m_backGround, *m_title;// Texture Object for a sprite
	D3DXIMAGE_INFO		m_backGroundInfo, m_titleInfo;	// File details of a texture

	//////////////////////////////////////////////////////////////////////////
	// DirectInput
	//////////////////////////////////////////////////////////////////////////
	IDirectInput8*		 m_pDIObject;	// DirectInput Object
	IDirectInputDevice8* m_pDIKeyboard;	// Keyboard Device
	IDirectInputDevice8* m_pDIMouse;	// Mouse Device 

	//////////////////////////////////////////////////////////////////////////
	// View and Projection Matrices
	//////////////////////////////////////////////////////////////////////////
	// Set these 3 component to initialize the view matrix (camera)
	D3DXVECTOR3 m_eyePos;
	D3DXVECTOR3 m_lookAt;
	D3DXVECTOR3 m_upVec;

	//////////////////////////////////////////////////////////////////////////
	//  Mouse pos
	D3DVECTOR cursor;
	// View matrix
	D3DXMATRIX m_viewMat;

	// Projection matrix
	D3DXMATRIX m_projMat;

	//////////////////////////////////////////////////////////////////////////
	// Lighting, Material, Textures
	//////////////////////////////////////////////////////////////////////////
	D3DLIGHT9			m_Light;

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//  Audio Includes
	//  TODO:  
	FMOD::System* fmodSystem;
	FMOD::Sound* themeMusic;
	FMOD::Sound* combatMusic;
	FMOD::Sound* menuMusic;
	FMOD::Channel* themeMusicChannel;
	bool keyIsDown[255];


	time_t start;
public:
	//////////////////////////////////////////////////////////////////////////
	// Init and Shutdown are preferred to constructors and destructor,
	// due to having more control when to explicitly call them when global.
	//////////////////////////////////////////////////////////////////////////
	GameEngine(void);
	~GameEngine(void);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Init
	// Parameters:	HWND hWnd - Handle to the window for the application
	//				HINSTANCE hInst - Handle to the application instance
	//				bool bWindowed - Boolean to control windowed or full-screen
	// Return:		void
	// Description:	Ran once at the start.  Initialize DirectX components and 
	//				variables to control the application.  
	//////////////////////////////////////////////////////////////////////////
	void Init(HWND& hWnd, HINSTANCE& hInst, bool bWindowed);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Update
	// Parameters:	float elapsedTime - Time that has elapsed since the last
	//					update call.
	// Return:		void
	// Description: Runs every frame, use dt to limit functionality called to
	//				a certain amount of elapsed time that has passed.  Used 
	//				for updating variables and processing input commands prior
	//				to calling render.
	//////////////////////////////////////////////////////////////////////////
	void Update(float dt);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Render
	// Parameters:	float elapsedTime - Time that has elapsed since the last
	//					render call.
	// Return:		void
	// Description: Runs every frame, use dt to limit functionality called to
	//				a certain amount of elapsed time that has passed.  Render
	//				calls all draw call to render objects to the screen.
	//////////////////////////////////////////////////////////////////////////
	void Render();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//  INFO:  Functions to draw graphics
	void drawMenuGraphics();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//  INFO:  Functions to draw text
	void drawMenuText();
	void drawDeltaTime();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//  INFO:  Different controls for different game states
	void menuControls();


	//////////////////////////////////////////////////////////////////////////
	// Name:		Shutdown
	// Parameters:	void
	// Return:		void
	// Description:	Runs once at the end of an application.  Destroy COM 
	//				objects and deallocate dynamic memory.
	//////////////////////////////////////////////////////////////////////////
	void Shutdown();
	void calcDeltaTime();
};