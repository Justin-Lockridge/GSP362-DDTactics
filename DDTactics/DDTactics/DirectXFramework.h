
//////////////////////////////////////////////////////////////
//  KNOWN ISSUES
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  TODO:   []
//			[]
//			[]

#pragma once

#include <stdio.h>
#include <time.h>
#include <vector>
//////////////////////////////////////////////////////////////
//  INFO:  For saving / loading
//////////////////////////////////////////////////////////////
#include <fstream>
#include <string>

#pragma comment(lib, "winmm.lib")

//////////////////////////////////////////////////////////////////////////
//  Direct3D headers && includes
//////////////////////////////////////////////////////////////////////////
#include <d3d9.h>
#include <d3dx9.h>
#pragma comment(lib, "d3d9.lib")
#pragma comment(lib, "d3dx9.lib")

//////////////////////////////////////////////////////////////////////////
//  DirectInput headers && includes
//////////////////////////////////////////////////////////////////////////
#define DIRECTINPUT_VERSION 0x0800
#include <dinput.h>
#pragma comment(lib, "dinput8.lib")
#pragma comment(lib, "dxguid.lib")

//////////////////////////////////////////////////////////////////////////
//  Audio includes using FMOD
//////////////////////////////////////////////////////////////////////////
#include "fmod.h"
#include "fmod.hpp"
#pragma comment(lib, "fmodex_vc.lib")

//////////////////////////////////////////////////////////////////////////
//  Game Includes
//////////////////////////////////////////////////////////////////////////
#include "Button.h"
#include "BaseCharacter.h"
#include "Overworld.h"

//  For safely releasing objects
#define SAFE_RELEASE(x) if(x){x->Release(); x = 0;}
#define MAXSAVES 3

enum GAME_STATE{
	MENU, LOAD, OPTIONS,
	CREDITS, BATTLE,
	MAP, TAVERN,
	OVERWORLD,
	QUIT,
};

enum MENU_STATE{
	MENU_MAIN,
	MENU_SAVE,
	MENU_LOAD
};

enum PLAYERSAVEDATA{
	CURRENTJOB,
	WARRIORLEVEL,
	ROGUELEVEL,
	GREYMAGELEVEL,
	CURRENTEXPERIENCE,
	CURRENTGOLD, 
	MAXPLAYERDATA
};

class CDirectXFramework{
	//////////////////////////////////////////////////////////////////////////
	// Application Variables
	//////////////////////////////////////////////////////////////////////////
	HWND				m_hWnd;					// Handle to the window
	bool				m_bVsync;				// Boolean for vertical syncing

	//////////////////////////////////////////////////////////////////////////
	// EDIT : Cameren
	// ALL READY GETTING TIME OUTSIDE OF FRAMEWORK
	// Also not sure on why you have multiple states variables
	//////////////////////////////////////////////////////////////////////////

	//float				m_currTime;				// Time to render current frame
	//float				m_prevTime, m_deltaTime, m_frameTime;				// Time to render previous frame

	int					m_FPS, m_gameOver, m_gameState, m_menuState, m_menuSelection;		


	//////////////////////////////////////////////////////////////////////////
	// Direct3D Variables
	//////////////////////////////////////////////////////////////////////////
	IDirect3D9*			m_pD3DObject;	// Direct3D 9 Object
	IDirect3DDevice9*	m_pD3DDevice;	// Direct3D 9 Device
	D3DCAPS9			m_D3DCaps;		// Device Capabilities

	//////////////////////////////////////////////////////////////////////////
	// Font Variables
	//////////////////////////////////////////////////////////////////////////
	ID3DXFont*			m_pD3DFont, *m_fontTwo;		// Font Object

	//////////////////////////////////////////////////////////////////////////
	// Sprite Variables
	//////////////////////////////////////////////////////////////////////////

	ID3DXSprite			*m_pD3DSprite;	
	IDirect3DTexture9	*m_backGround,
						*m_cursorTexture, 
						*m_menuTextures,
						*m_saveMenuTextures,
						*m_title,
						*m_saveBackground;
	D3DXIMAGE_INFO		m_backGroundInfo, 
						m_cursorInfo,
						m_saveMenuTexturesInfo,
						m_titleInfo,
						m_saveBackgroundInfo;	


	//////////////////////////////////////////////////////////////////////////
	// DirectInput
	//////////////////////////////////////////////////////////////////////////
	IDirectInput8*		 m_pDIObject;	// DirectInput Object
	IDirectInputDevice8* m_pDIKeyboard;	// Keyboard Device
	IDirectInputDevice8* m_pDIMouse;	// Mouse Device 
	D3DVECTOR m_cursor;	//  Mouse pos
	bool m_keyPressed[255];	// check for if key is pressed
	//////////////////////////////////////////////////////////////////////////
	//Smyth - moved from Menu.cpp
	//////////////////////////////////////////////////////////////////////////
	//char buffer[255];
	//DIMOUSESTATE2 mouseState;
	




	//////////////////////////////////////////////////////////////////////////
	// View and Projection Matrices
	//////////////////////////////////////////////////////////////////////////
	
	D3DXVECTOR3 m_eyePos;
	D3DXVECTOR3 m_lookAt;
	D3DXVECTOR3 m_upVec;

	D3DXMATRIX m_viewMat; // View matrix
	D3DXMATRIX m_projMat; // Projection matrix

	//////////////////////////////////////////////////////////////////////////
	// Lighting, Material, Textures
	//////////////////////////////////////////////////////////////////////////
	D3DLIGHT9			m_Light;

	//////////////////////////////////////////////////////////////////////////
	//  FMOD ( Audio )
	//////////////////////////////////////////////////////////////////////////

	FMOD::System*  fmodSystem;
	FMOD::Sound*   m_themeMusic;
	FMOD::Sound*   m_combatMusic;
	FMOD::Sound*   m_menuMusic;
	FMOD::Sound*   m_overWorldMusic;
	FMOD::Channel* m_musicChannel;


	//////////////////////////////////////////////////////////////////////////
	//  Game stuff
	//////////////////////////////////////////////////////////////////////////
	std::vector<Button> m_buttons;
	Overworld overworld;
	CBaseCharacter m_player;
	//////////////////////////////////////////////////////////////////////////
	//  INFO:  Save game data
	std::string m_savedGame[MAXSAVES];
	int m_gameSave[MAXSAVES][MAXPLAYERDATA];
public:
	//////////////////////////////////////////////////////////////////////////
	// Init and Shutdown are preferred to constructors and destructor,
	// due to having more control when to explicitly call them when global.
	//////////////////////////////////////////////////////////////////////////
	CDirectXFramework(void);
	~CDirectXFramework(void);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Init
	// Parameters:	HWND hWnd - Handle to the window for the application
	//				HINSTANCE hInst - Handle to the application instance
	//				bool bWindowed - Boolean to control windowed or full-screen
	// Return:		void
	// Description:	Ran once at the start.  Initialize DirectX components and 
	//				variables to control the application.  
	//////////////////////////////////////////////////////////////////////////
	void Init(HWND& hWnd, HINSTANCE& hInst, bool bWindowed);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Update
	// Parameters:	float elapsedTime - Time that has elapsed since the last
	//					update call.
	// Return:		void
	// Description: Runs every frame, use dt to limit functionality called to
	//				a certain amount of elapsed time that has passed.  Used 
	//				for updating variables and processing input commands prior
	//				to calling render.
	//////////////////////////////////////////////////////////////////////////
	void Update(float dt);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Render
	// Parameters:	float elapsedTime - Time that has elapsed since the last
	//					render call.
	// Return:		void
	// Description: Runs every frame, use dt to limit functionality called to
	//				a certain amount of elapsed time that has passed.  Render
	//				calls all draw call to render objects to the screen.
	//////////////////////////////////////////////////////////////////////////
	void Render(float dt);

	//////////////////////////////////////////////////////////////////////////  
	//  Menu Functions
	//////////////////////////////////////////////////////////////////////////
	void InitMenu();
	void UpdateMenu();
	void RenderMenu();

	//////////////////////////////////////////////////////////////////////////  
	//  Battle Functions
	//////////////////////////////////////////////////////////////////////////
	void InitBattle();
	void UpdateBattle();
	void RenderBattle();

	//////////////////////////////////////////////////////////////////////////
	//  INFO:  Save / Load game functions - defined in Menu.cpp
	void saveGame(int saveLocation);
	void loadGame();
	//////////////////////////////////////////////////////////////////////////
	// Name:		Shutdown
	// Parameters:	void
	// Return:		void
	// Description:	Runs once at the end of an application.  Destroy COM 
	//				objects and deallocate dynamic memory.
	//////////////////////////////////////////////////////////////////////////
	void Shutdown();
};